package geekbrains.java1.homework8;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*; // for Graphics2D
import java.util.*;

public class Main {

    public static void main(String[] args) {
	// write your code here
        new TicTacToe();
        new TicTacToe();
    }
}

/*
 * Java 1. Lesson 8. Game Tic Tac Toe
 * Class: Main-Class
 *
 * @author Denis Surov
 * @version 06.08.2018
 */


class TicTacToe extends JFrame {

    final String TITLE_OF_PROGRAM = "Tic Tac Toe";
    final int WINDOW_SIZE = 330;
    final int WINDOW_DX = 7;
    final int WINDOW_DY = 55;
    int FIELD_SIZE = 5;
    final int CELL_SIZE = WINDOW_SIZE / FIELD_SIZE;
    final String BTN_INIT = "New game";
    final String BTN_EXIT = "Exit";

    Panel panel = new Panel();
    Field field = new Field(FIELD_SIZE, CELL_SIZE);
    Human human = new Human(field.getHumanDot());
    AI ai = new AI(field.getAIDot());



    TicTacToe() {

        setTitle(TITLE_OF_PROGRAM);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(WINDOW_SIZE + WINDOW_DX, WINDOW_SIZE + WINDOW_DY);
        setLocationRelativeTo(null); // to the center
        setResizable(false);

        panel.setBackground(Color.white);
        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                boolean newlevel1;
                super.mouseReleased(e);
                newlevel1=human.turn(e.getX()/CELL_SIZE, e.getY()/CELL_SIZE, field, ai);
                if(newlevel1==true) {
                    FIELD_SIZE = FIELD_SIZE + 1;
                }
                panel.repaint();
                if (field.isGameOver())
                    JOptionPane.showMessageDialog(
                            TicTacToe.this, field.getGameOverMsg());
            }
        });
        JButton init = new JButton(BTN_INIT);
        init.addActionListener(e -> {
            field.init();
            panel.repaint();
        });
        JButton exit = new JButton(BTN_EXIT);
        //exit.addActionListener(e -> System.exit(0));
        exit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        JPanel panelBtn = new JPanel();
        panelBtn.setLayout(new GridLayout()); // for panel of buttons
        panelBtn.add(init);
        panelBtn.add(exit);

        //setLayout(new BorderLayout()); // by dafault
        add(panelBtn, BorderLayout.SOUTH);
        add(panel, BorderLayout.CENTER);
        setVisible(true);
    }

    class Panel extends JPanel { // for painting
        @Override
        public void paint(Graphics g) {
            super.paint(g);
            field.paint(g);
        }
    }
}
class Human {
    private final char DOT;
    boolean newlevel;

    Human(char ch) { DOT = ch; }

    boolean turn(int x, int y, Field field, AI ai) {
        if (field.isCellValid(x, y)) {
            if (!field.isGameOver()) newlevel=field.setDot(x, y, DOT);
            if (!field.isGameOver()) ai.turn(field);
        }
        if(newlevel==true)
        {
            return true;
        }
        return false;
    }
}
class Field {
    private final int FIELD_SIZE;
    private final int CELL_SIZE;
    private final char HUMAN_DOT = 'x';
    private final char AI_DOT = 'o';
    private final char EMPTY_DOT = '.';
    private final String MSG_DRAW = "Draw, sorry...";
    private final String MSG_HUMAN_WON = "YOU WON!";
    private final String MSG_AI_WON = "AI WON!";
    private char[][] map;
    private String gameOverMsg;

    Field(int field_size, int cell_size) {
        FIELD_SIZE = field_size;
        CELL_SIZE = cell_size;
        map = new char[FIELD_SIZE][FIELD_SIZE];
        init();
    }

    void init() {
        for (int i = 0; i < FIELD_SIZE; i++)
            for (int j = 0; j < FIELD_SIZE; j++)
                map[i][j] = EMPTY_DOT;
        gameOverMsg = null;
    }

    int getSize() { return FIELD_SIZE; }

    char getHumanDot() { return HUMAN_DOT; }

    char getAIDot() { return AI_DOT; }

    boolean isGameOver() { return gameOverMsg != null; }

    String getGameOverMsg() { return gameOverMsg; }

        boolean setDot(int x, int y, char dot) { // set dot and check fill and win
            map[x][y] = dot;
            if (checkWin(HUMAN_DOT)) {
                gameOverMsg = MSG_HUMAN_WON;
                return true;
            }
            else if (checkWin(AI_DOT))
                gameOverMsg = MSG_AI_WON;
            else if (isMapFull())
                gameOverMsg = MSG_DRAW;
            return false;
        }

    boolean isMapFull() {
        for (int i = 0; i < FIELD_SIZE; i++)
            for (int j = 0; j < FIELD_SIZE; j++)
                if (map[i][j] == EMPTY_DOT) return false;
        return true;
    }

    boolean checkWin(char dot) {
        // checking horizontals / verticals
        int sum_dot=0;
        for (int i = 0; i < FIELD_SIZE; i++) {
            sum_dot = 0;
            for (int j = 0; j < FIELD_SIZE; j++) {
                if (map[i][j] == dot) sum_dot = sum_dot + 1;
                if (sum_dot == FIELD_SIZE) return true;
            }
        }
        sum_dot=0;
        for (int j = 0; j < FIELD_SIZE; j++) {
            sum_dot=0;
            for (int i = 0; i < FIELD_SIZE; i++) {
                if (map[i][j]== dot) sum_dot=sum_dot+1;
                if (sum_dot==FIELD_SIZE) return true;
            }
        }
        // checking diagonals
        sum_dot=0;
        for (int j = 0,i=0; j < FIELD_SIZE;i++, j++) {
            if (map[i][j]== dot) sum_dot=sum_dot+1;
            if (sum_dot==FIELD_SIZE-1) return true;

        }
        sum_dot=0;
        for (int j = 0,i=FIELD_SIZE-1; j < FIELD_SIZE;i--, j++) {
            if (map[i][j]== dot) sum_dot=sum_dot+1;
            if (sum_dot==FIELD_SIZE-1) return true;

        }
        return false;
    }

    boolean isCellValid(int x, int y) {
        if (x < 0 || y < 0 || x > FIELD_SIZE - 1 || y > FIELD_SIZE - 1) return false;
        if (map[x][y] == EMPTY_DOT) return true;
        return false;
    }

    public void paint(Graphics g) {
        g.setColor(Color.lightGray);
        for (int i = 1; i < FIELD_SIZE; i++) {
            g.drawLine(0, i*CELL_SIZE, FIELD_SIZE*CELL_SIZE, i*CELL_SIZE);
            g.drawLine(i*CELL_SIZE, 0, i*CELL_SIZE, FIELD_SIZE*CELL_SIZE);
        }
        Graphics2D g2 = (Graphics2D) g; // use Graphics2D
        g2.setStroke(new BasicStroke(5));
        for (int y = 0; y < FIELD_SIZE; y++) {
            for (int x = 0; x < FIELD_SIZE; x++) {
                if (map[x][y] == HUMAN_DOT) {
                    g.setColor(Color.blue);
                    g2.draw(new Line2D.Float(x*CELL_SIZE+CELL_SIZE/4, y*CELL_SIZE+CELL_SIZE/4, (x+1)*CELL_SIZE-CELL_SIZE/4, (y+1)*CELL_SIZE-CELL_SIZE/4));
                    g2.draw(new Line2D.Float(x*CELL_SIZE+CELL_SIZE/4, (y+1)*CELL_SIZE-CELL_SIZE/4, (x+1)*CELL_SIZE-CELL_SIZE/4, y*CELL_SIZE+CELL_SIZE/4));
                }
                if (map[x][y] == AI_DOT) {
                    g.setColor(Color.red);
                    g2.draw(new Ellipse2D.Float(x*CELL_SIZE+CELL_SIZE/4, y*CELL_SIZE+CELL_SIZE/4, CELL_SIZE/2, CELL_SIZE/2));
                }
            }
        }
    }
}
class AI {
    Random random = new Random();
    private final char DOT;

    AI(char ch) { DOT = ch; }

    boolean turn(Field field) {
        int x, y;
        boolean newlevel;
        do {
            x = random.nextInt(field.getSize());
            y = random.nextInt(field.getSize());
        } while (!field.isCellValid(x, y));
        newlevel=field.setDot(x, y, DOT);
        if (newlevel==true) {
            return true;
        }
        else
            return false;
    }
}